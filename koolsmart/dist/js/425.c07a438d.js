"use strict";(self["webpackChunkxiaolou"]=self["webpackChunkxiaolou"]||[]).push([[425],{9425:function(t,e,i){i.r(e),i.d(e,{default:function(){return d}});var s=function(){var t=this,e=t._self._c;return e("div",{staticClass:"all"},[e("div",{staticClass:"main"},[e("div",{staticClass:"middle"},[e("div",{staticClass:"zero",on:{click:t.get_render}},[e("div",[e("i",{staticClass:"el-icon-plus"}),e("el-button",{attrs:{round:""}},[t._v("New Scenarios")])],1)]),e("el-dialog",{staticClass:"scenarioDialog",attrs:{title:"Gallery",visible:t.addScenarioDialogFormVisible,width:"1100px","modal-append-to-body":!1},on:{"update:visible":function(e){t.addScenarioDialogFormVisible=e}}},[e("ul",{staticClass:"demo-image"},[e("li",{staticClass:"uploadLi"},[e("el-upload",{staticClass:"upload",attrs:{action:"#","auto-upload":!1,"show-file-list":!1,"http-request":t.handelHttp,"on-change":t.handelChange,multiple:"",limit:t.limitPic,"on-exceed":t.handleExceed,"list-type":"picture-card",accept:"JPG,.PNG,.JPEG,.jpg,.png,.jpeg"}},[e("i",{staticClass:"el-icon-plus"})])],1),t._l(t.render_pic,(function(i,s){return e("li",{key:s},[e("el-checkbox",{model:{value:i.check,callback:function(e){t.$set(i,"check",e)},expression:"item.check"}},[e("el-image",{attrs:{src:i.pic,fit:"fill"}})],1)],1)}))],2),e("el-button",{attrs:{type:"primary",round:""},on:{click:function(e){return t.scenarioDialogConfirm()}}},[t._v("Confirm")])],1)],1)])])},a=[],o=(i(7658),i(9872)),r=i(1273),n={name:"ScenarioStart",data(){return{ha_url:window.sessionStorage.getItem("hass_url"),visitor:null,addScenarioDialogFormVisible:!1,render_pic:[],planId:"",projects:{},projectName:"",dialogImageUrl:"",customImgs:[],limitPic:10,instance:null}},methods:{getBase64(t){return new Promise(((e,i)=>{const s=new FileReader;let a="";s.readAsDataURL(t),s.onload=function(){a=s.result},s.onerror=function(t){i(t)},s.onloadend=function(){e(a)}}))},handleExceed(t,e){this.$message.warning(`The current limit is to select ${this.limitPic} images, but you have selected ${t.length} images this time.`)},async handelChange(t,e){let i;try{i=await this.getBase64(t.raw)}catch{r.log("err1")}let s=(new Date).getTime()+Math.floor(1e7*Math.random());this.projects[this.projectName].scenarioList.push(s),this.projects[this.projectName].scenarios[s]={name:s,pic:i,add_pic:{},add_icons:{},automation_id:"",automation_name:"",show:!1},this.$store.commit("setProjects",JSON.stringify(this.projects)),await this.init_automation(s),setTimeout((()=>{this.setDefault()}),0)},setDefault(){let t=this.projects[this.projectName].scenarioList[0];this.projects[this.projectName].default=this.projects[this.projectName].scenarios[t].pic,this.projects[this.projectName].defaultScenario=t,this.addScenarioDialogFormVisible=!1,this.$store.commit("setProjects",JSON.stringify(this.projects)),this.$store.commit("setShow","1"),this.$router.push("/project/scenario-end")},init_automation(t){let e=(new Date).getTime()+Math.floor(1e7*Math.random()),i={alias:t,description:"",trigger:[],condition:[],action:[],mode:"single"};this.instance.post("/api-ha/api/config/automation/config/"+e,i).then((i=>{this.projects[this.$store.state.projectName].scenarios[t]["automation_id"]=e,this.projects[this.$store.state.projectName].scenarios[t]["automation_name"]=t.toString().toLowerCase().replaceAll("-","_"),this.projects=JSON.parse(JSON.stringify(this.projects)),this.$store.commit("setProjects",JSON.stringify(this.projects))})).catch((t=>r.log(t)))},async scenarioDialogConfirm(){this.projects[this.projectName].scenarios={},this.projects[this.projectName].scenarioList=[];let t=(new Date).getTime()+Math.floor(1e7*Math.random());for(let e=0;e<this.render_pic.length;e++)1==this.render_pic[e].check&&(t+=1,this.projects[this.projectName].scenarioList.push(t),this.projects[this.projectName].scenarios[t]={name:t,pic:this.render_pic[e].pic,add_pic:{},add_icons:{},automation_id:"",automation_name:"",show:!1},await this.init_automation(t));this.$store.commit("setProjects",JSON.stringify(this.projects)),0==this.projects[this.projectName].scenarioList?this.$message.error("Please select a picture"):this.setDefault()},get_render:(0,o.Z)((function(){this.render_pic=[];const t=async()=>{let t={obsDesignId:this.planId},e=await this.$axios.get("/api-ks/koolsmart/api/site/design/designrenderpics",{params:t});if(0!=e.data.renderPics.length){this.addScenarioDialogFormVisible=!0;for(let t=0;t<e.data.renderPics.length;t++){let i=1;for(let s=0;s<this.render_pic.length;s++)if(e.data.renderPics[t]==this.render_pic[s].pic){i=0;break}i&&this.render_pic.push({pic:e.data.renderPics[t],check:!1})}}else this.$message.error("No rendered image found")};if(this.$store.state.isVisitor){this.addScenarioDialogFormVisible=!0;for(let t=0;t<this.visitor.renderPics.length;t++){let e=1;for(let i=0;i<this.render_pic.length;i++)if(this.visitor.renderPics[t]==this.render_pic[i].pic){e=0;break}e&&this.render_pic.push({pic:this.visitor.renderPics[t],check:!1})}}else t()})),controlHeader(){this.$store.commit("setAutoState",!0),this.$store.commit("setScenarioState",!1),this.$store.commit("setStep",2)},initOp(){this.instance=this.$store.state.instance,this.visitor=JSON.parse(JSON.stringify(this.$store.state.visitor)),this.planId=this.$store.state.planId,this.projects=JSON.parse(this.$store.state.projects),this.projectName=this.$store.state.projectName}},created(){this.controlHeader(),this.initOp()}},c=n,l=i(1001),h=(0,l.Z)(c,s,a,!1,null,"5d0fe71c",null),d=h.exports},9872:function(t,e,i){function s(t){let e=!0;return function(){e&&(e=!1,t.call(this,arguments),setTimeout((()=>{e=!0}),2e3))}}i.d(e,{Z:function(){return s}})}}]);
//# sourceMappingURL=425.c07a438d.js.map